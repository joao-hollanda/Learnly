// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Learnly.Repositorie.Migrations
{
    [DbContext(typeof(LearnlyContexto))]
    partial class LearnlyContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Learnly.Domain.Entities.PlanoEstudo", b =>
                {
                    b.Property<int>("PlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasPorSemana")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusPlano")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PlanosEstudo", (string)null);
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.Alternativa", b =>
                {
                    b.Property<int>("AlternativaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arquivo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correta")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Letra")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AlternativaId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativas", (string)null);
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.RespostaSimulado", b =>
                {
                    b.Property<int>("RespostaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlternativaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SimuladoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RespostaId");

                    b.HasIndex("AlternativaId");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("SimuladoId");

                    b.ToTable("RespostasSimulado", (string)null);
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.SimuladoQuestao", b =>
                {
                    b.Property<int>("SimuladoQuestaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Acertou")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SimuladoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SimuladoQuestaoId");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("SimuladoId");

                    b.ToTable("SimuladoQuestoes", (string)null);
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cidade")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanoEstudoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusConta")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Questao", b =>
                {
                    b.Property<int>("QuestaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativaCorreta")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ano")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arquivos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contexto")
                        .HasColumnType("TEXT");

                    b.Property<string>("Disciplina")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IntroducaoAlternativa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lingua")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("QuestaoId");

                    b.ToTable("Questoes", (string)null);
                });

            modelBuilder.Entity("Simulado", b =>
                {
                    b.Property<int>("SimuladoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NotaFinal")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SimuladoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Simulados", (string)null);
                });

            modelBuilder.Entity("Learnly.Domain.Entities.PlanoEstudo", b =>
                {
                    b.HasOne("Learnly.Domain.Entities.Usuario", "Usuario")
                        .WithOne("PlanoEstudo")
                        .HasForeignKey("Learnly.Domain.Entities.PlanoEstudo", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.Alternativa", b =>
                {
                    b.HasOne("Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.RespostaSimulado", b =>
                {
                    b.HasOne("Learnly.Domain.Entities.Simulados.Alternativa", "Alternativa")
                        .WithMany()
                        .HasForeignKey("AlternativaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Questao", "Questao")
                        .WithMany("Respostas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulado", "Simulado")
                        .WithMany("Respostas")
                        .HasForeignKey("SimuladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternativa");

                    b.Navigation("Questao");

                    b.Navigation("Simulado");
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Simulados.SimuladoQuestao", b =>
                {
                    b.HasOne("Questao", "Questao")
                        .WithMany("Simulados")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulado", "Simulado")
                        .WithMany("Questoes")
                        .HasForeignKey("SimuladoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");

                    b.Navigation("Simulado");
                });

            modelBuilder.Entity("Simulado", b =>
                {
                    b.HasOne("Learnly.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Simulados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Learnly.Domain.Entities.Simulados.DesempenhoSimulado", "Desempenho", b1 =>
                        {
                            b1.Property<int>("SimuladoId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Feedback")
                                .HasColumnType("TEXT");

                            b1.Property<int>("QuantidadeDeAcertos")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("QuantidadeDeQuestoes")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SimuladoId");

                            b1.ToTable("Simulados");

                            b1.WithOwner()
                                .HasForeignKey("SimuladoId");
                        });

                    b.Navigation("Desempenho");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Learnly.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("PlanoEstudo");

                    b.Navigation("Simulados");
                });

            modelBuilder.Entity("Questao", b =>
                {
                    b.Navigation("Alternativas");

                    b.Navigation("Respostas");

                    b.Navigation("Simulados");
                });

            modelBuilder.Entity("Simulado", b =>
                {
                    b.Navigation("Questoes");

                    b.Navigation("Respostas");
                });
#pragma warning restore 612, 618
        }
    }
}
